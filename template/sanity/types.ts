/**
 * ---------------------------------------------------------------------------------
 * This file has been generated by Sanity TypeGen.
 * Command: `sanity typegen generate`
 *
 * Any modifications made directly to this file will be overwritten the next time
 * the TypeScript definitions are generated. Please make changes to the Sanity
 * schema definitions and/or GROQ queries if you need to update these types.
 *
 * For more information on how to use Sanity TypeGen, visit the official documentation:
 * https://www.sanity.io/docs/sanity-typegen
 * ---------------------------------------------------------------------------------
 */

// Source: schema.json
export type SanityImagePaletteSwatch = {
  _type: "sanity.imagePaletteSwatch";
  background?: string;
  foreground?: string;
  population?: number;
  title?: string;
};

export type SanityImagePalette = {
  _type: "sanity.imagePalette";
  darkMuted?: SanityImagePaletteSwatch;
  lightVibrant?: SanityImagePaletteSwatch;
  darkVibrant?: SanityImagePaletteSwatch;
  vibrant?: SanityImagePaletteSwatch;
  dominant?: SanityImagePaletteSwatch;
  lightMuted?: SanityImagePaletteSwatch;
  muted?: SanityImagePaletteSwatch;
};

export type SanityImageDimensions = {
  _type: "sanity.imageDimensions";
  height?: number;
  width?: number;
  aspectRatio?: number;
};

export type SanityFileAsset = {
  _id: string;
  _type: "sanity.fileAsset";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  originalFilename?: string;
  label?: string;
  title?: string;
  description?: string;
  altText?: string;
  sha1hash?: string;
  extension?: string;
  mimeType?: string;
  size?: number;
  assetId?: string;
  uploadId?: string;
  path?: string;
  url?: string;
  source?: SanityAssetSourceData;
};

export type Geopoint = {
  _type: "geopoint";
  lat?: number;
  lng?: number;
  alt?: number;
};

export type Slug = {
  _type: "slug";
  current?: string;
  source?: string;
};

export type TeamMember = {
  _id: string;
  _type: "teamMember";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  locales?: Array<string>;
  name?: string;
  bio?: {
    en?: string;
    vi?: string;
  };
  image?: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    _type: "image";
  };
};

export type FaqSection = {
  _type: "faqSection";
  title?: {
    en?: string;
    vi?: string;
  };
  description?: {
    en?: string;
    vi?: string;
  };
  ctaButton?: CtaButton;
  faqItems?: Array<{
    question?: {
      en?: string;
      vi?: string;
    };
    answer?: {
      en?: string;
      vi?: string;
    };
    _key: string;
  }>;
  ctaSection?: CtaSection;
};

export type CtaSection = {
  _type: "ctaSection";
  image?: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    alt?: {
      en?: string;
      vi?: string;
    };
    _type: "image";
  };
  title?: {
    en?: string;
    vi?: string;
  };
  description?: {
    en?: string;
    vi?: string;
  };
  ctas?: Array<{
    _key: string;
  } & CtaButton>;
};

export type CtaButton = {
  _type: "ctaButton";
  variant?: "primary" | "secondary" | "outline" | "tertiary";
  ctaText?: {
    en?: string;
    vi?: string;
  };
  showArrowIcon?: boolean;
  openInNewTab?: boolean;
  href?: string;
};

export type Author = {
  _id: string;
  _type: "author";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  locales?: Array<string>;
  name?: string;
  role?: {
    en?: string;
    vi?: string;
  };
  company?: string;
  companyLogo?: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    _type: "image";
  };
  avatar?: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    _type: "image";
  };
};

export type AboutPage = {
  _id: string;
  _type: "aboutPage";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  locales?: Array<string>;
  hero?: {
    subtitle?: {
      en?: string;
      vi?: string;
    };
    title?: {
      en?: string;
      vi?: string;
    };
    description?: {
      en?: string;
      vi?: string;
    };
    image?: {
      asset?: {
        _ref: string;
        _type: "reference";
        _weak?: boolean;
        [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
      };
      media?: unknown;
      hotspot?: SanityImageHotspot;
      crop?: SanityImageCrop;
      _type: "image";
    };
    ctaList?: Array<{
      _key: string;
    } & CtaButton>;
  };
  seo?: Seo;
};

export type Seo = {
  _type: "seo";
  metaTitle?: {
    en?: string;
    vi?: string;
  };
  metaDescription?: {
    en?: string;
    vi?: string;
  };
  canonicalUrl?: string;
  openGraph?: {
    title?: {
      en?: string;
      vi?: string;
    };
    description?: {
      en?: string;
      vi?: string;
    };
    type?: "website" | "article";
  };
  ogImage?: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    alt?: {
      en?: string;
      vi?: string;
    };
    _type: "image";
  };
  robotDirectives?: {
    noIndex?: boolean;
    noFollow?: boolean;
    noArchive?: boolean;
  };
  keywords?: {
    en?: Array<string>;
    vi?: Array<string>;
  };
};

export type SanityImageCrop = {
  _type: "sanity.imageCrop";
  top?: number;
  bottom?: number;
  left?: number;
  right?: number;
};

export type SanityImageHotspot = {
  _type: "sanity.imageHotspot";
  x?: number;
  y?: number;
  height?: number;
  width?: number;
};

export type SanityImageAsset = {
  _id: string;
  _type: "sanity.imageAsset";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  originalFilename?: string;
  label?: string;
  title?: string;
  description?: string;
  altText?: string;
  sha1hash?: string;
  extension?: string;
  mimeType?: string;
  size?: number;
  assetId?: string;
  uploadId?: string;
  path?: string;
  url?: string;
  metadata?: SanityImageMetadata;
  source?: SanityAssetSourceData;
};

export type SanityAssetSourceData = {
  _type: "sanity.assetSourceData";
  name?: string;
  id?: string;
  url?: string;
};

export type SanityImageMetadata = {
  _type: "sanity.imageMetadata";
  location?: Geopoint;
  dimensions?: SanityImageDimensions;
  palette?: SanityImagePalette;
  lqip?: string;
  blurHash?: string;
  hasAlpha?: boolean;
  isOpaque?: boolean;
};

export type AllSanitySchemaTypes = SanityImagePaletteSwatch | SanityImagePalette | SanityImageDimensions | SanityFileAsset | Geopoint | Slug | TeamMember | FaqSection | CtaSection | CtaButton | Author | AboutPage | Seo | SanityImageCrop | SanityImageHotspot | SanityImageAsset | SanityAssetSourceData | SanityImageMetadata;
export declare const internalGroqTypeReferenceTo: unique symbol;
// Source: app/(frontend)/[locale]/contact/_components/FaqSection.tsx
// Variable: query
// Query: *[_type == "faq"] | order(priority desc) {        _id,        "question": question,        "answer": answer,        priority      }
export type QueryResult = Array<never>;

// Query TypeMap
import "@sanity/client";
declare module "@sanity/client" {
  interface SanityQueries {
    "\n      *[_type == \"faq\"] | order(priority desc) {\n        _id,\n        \"question\": question,\n        \"answer\": answer,\n        priority\n      }\n    ": QueryResult;
  }
}
